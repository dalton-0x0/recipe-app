{"version":3,"sources":["components/Form.jsx","components/Recipes.jsx","App.jsx","components/OneRecipe.jsx","components/Router.jsx","registerServiceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","slyle","marginBottom","className","type","name","Recipes","webHits","map","hit","key","recipe","calories","style","src","image","alt","label","length","substring","Math","round","source","Link","to","pathname","state","YOUR_APP_ID","YOUR_APP_KEY","App","webData","e","a","recipeName","target","elements","value","preventDefault","fetch","api_call","json","data","setState","hits","console","log","localStorage","getItem","recipes","JSON","parse","this","stringify","setItem","Component","OneRecipe","activeRecipe","componentDidMount","title","location","request","response","ingredientLines","join","href","url","React","Router","BrowserRouter","Switch","Route","path","component","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d4390996.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => {\n  return (\n    <form onSubmit={props.getRecipe} slyle={{ marginBottom: \"2rem\" }}>\n      <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n      <button className=\"form__button\">Search</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n      {props.webHits.map(hit => {\n        return (\n          <div\n            className=\"col-md-4\"\n            key={hit.recipe.calories}\n            style={{ marginBottom: \"2rem\" }}\n          >\n            <div className=\"recipes__box\">\n              <img src={hit.recipe.image} alt={hit.recipe.label} />\n            </div>\n            <div className=\"recipe__text\">\n              <h5 className=\"recipes__title\">\n                {hit.recipe.label.length < 20\n                  ? `${hit.recipe.label}`\n                  : `${hit.recipe.label.substring(0, 25)}...`}\n              </h5>\n              <p className=\"recipes__subtitle\">\n                Calories: <span>{Math.round(hit.recipe.calories)}</span> kCal\n              </p>\n              <p className=\"recipes__subtitle\">\n                Source: <span>{hit.recipe.source}</span>\n              </p>\n            </div>\n            <button className=\"recipe__buttons\">\n              <Link\n                to={{\n                  pathname: `/recipe/${hit.recipe.calories}`,\n                  state: { recipe: hit.recipe.label }\n                }}\n              >\n                View Recipe\n              </Link>\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\nexport default Recipes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form.jsx\";\nimport Recipes from \"./components/Recipes.jsx\";\n\nconst YOUR_APP_ID = \"19d99524\";\nconst YOUR_APP_KEY = \"624a1106ed075cbb4d7e85f1dcfe9311\";\n// const API_KEY = \"f653f67522513510e20a1928507fbe51\";\n\nclass App extends Component {\n  state = {\n    webData: []\n  };\n  getRecipe = async e => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(\n      `https://api.edamam.com/search?q=${recipeName}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}`\n    );\n    const data = await api_call.json();\n    this.setState({ webData: data.hits });\n    console.log(this.state.webData);\n  };\n\n  componentDidMount() {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ webData: recipes });\n  }\n\n  componentDidUpdate() {\n    const recipes = JSON.stringify(this.state.webData);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Finder</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes webHits={this.state.webData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst YOUR_APP_ID = \"19d99524\";\nconst YOUR_APP_KEY = \"624a1106ed075cbb4d7e85f1dcfe9311\";\n\nclass OneRecipe extends React.Component {\n  state = {\n    activeRecipe: []\n  };\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const request = await fetch(\n      `https://api.edamam.com/search?q=${title}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}`\n    );\n    const response = await request.json();\n    this.setState({ activeRecipe: response.hits[0].recipe });\n    console.log(this.state.activeRecipe);\n  };\n  render() {\n    const recipe = this.state.activeRecipe;\n    return (\n      <div className=\"container\">\n        {this.state.activeRecipe.length !== 0 && (\n          <div className=\"active-recipe\">\n            <img\n              src={recipe.image}\n              className=\"active-recipe__img\"\n              alt={recipe}\n            />\n            <h3 className=\"active-recipe__title\">{recipe.label}</h3>\n            <h4 className=\"active-recipe__ingredients\">\n              Ingredients: <span>{recipe.ingredientLines.join(\", \")}</span>\n            </h4>\n            <h4 className=\"active-recipe__source\">\n              Source: <span>{recipe.source}</span>\n            </h4>\n            <h4 className=\"active-recipe__website\">\n              Website:\n              <span>\n                <a href={recipe.url}>{recipe.url}</a>\n              </span>\n            </h4>\n            <button className=\"active-recipe__button\">\n              <Link to=\"/\">Go Home</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default OneRecipe;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"../App.jsx\";\nimport OneRecipe from \"./OneRecipe.jsx\";\n\nconst Router = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={App} exact />\n        <Route path=\"/recipe/:id\" component={OneRecipe} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Router from \"./components/Router.jsx\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}